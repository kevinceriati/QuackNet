security:
  encoders:
    # use your user class name here
    App\Entity\Ducks:
      # bcrypt or sodium are recommended
      # sodium is more secure, but requires PHP 7.2 or the Sodium extension
      algorithm: bcrypt
      cost: 12
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    users:
      entity:
        # the class of the entity that represents users
        class: 'App\Entity\Ducks'
        # the property to query by - e.g. username, email, etc
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    api:
      pattern: ^/api
      stateless: true
      anonymous: ~
      http_basic: ~
    main:
      anonymous: true
      guard:
        authenticators:
          - App\Security\LoginFormAuthenticator
      logout:
        path: app_logout
        # where to redirect after logout
        target: quack_index

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
#   - { path: ^/admin, roles: ROLE_ADMIN }
#   - { path: ^/profile, roles: ROLE_USER }
    - { path: ^/api/duck, methods:[POST], roles: IS_AUTHENTICATED_ANONYMOUSLY }

    - { path: ^/quack/new, roles: ROLE_USER }
    - { path: ^/comment, roles: ROLE_ADMIN }
    - { path: ^/api, roles: ROLE_USER }


